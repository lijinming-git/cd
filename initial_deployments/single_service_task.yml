---
# general deployment of one service
# huangchun@20181128

- name: get related info
  set_fact:
    application_port: "{{ service_configs[service_name]['server_port'] }}"
    all_ports: "{{ [service_configs[service_name]['server_port']] + ( deploy_configs[service_name]['published_ports'] | default([]) ) }}"
    image_name: "{{ deploy_configs[service_name]['image_name'] }}"
    image_tag: "{{ deploy_configs[service_name]['image_tag'] | default(unified_image_tag) }}"

- name: display target info
  debug:
    msg: "now deploying {{ service_name }} to {{ inventory_hostname }} with exposed port(s): {{ all_ports | join(',') }}"

- name: get consul kv
  uri:
    url: "http://127.0.0.1:8500/v1/kv/convertlab/{{ service_name }}/?recurse=true"
  register: consul_kv_json

- name: empty old env file
  file:
    path: "/tmp/{{ service_name }}.env"
    state: absent
  changed_when: false

- name: generate new env file
  lineinfile:
    line: "{{ item.Key.split('/')[-1] }}={{ item.Value | b64decode }}"
    dest: "/tmp/{{ service_name }}.env"
    create: yes
  loop: "{{ consul_kv_json.json }}"
  changed_when: false

- name: log in to registry
  docker_login:
    registry: "{{ docker_registry_addr }}"
    username: "{{ docker_registry_username }}"
    password: "{{ docker_registry_password }}"
  when:
    - docker_registry_addr is defined
    - docker_registry_username is defined
    - docker_registry_password is defined

- name: "pull docker images for {{ service_name }}"
  docker_image:
    name: "{{ docker_registry_addr }}/{{ landscape }}/{{ image_name }}:{{ image_tag }}"
    force: "{{ (image_tag == 'latest') | ternary('yes','no') }}"
    state: present
    
  # when: "ansible_hostname in deploy_conf.hosts or ansible_default_ipv4.address in deploy_conf.hosts"

- name: "start container for {{ service_name }}"
  docker_container:
    name: "{{ service_name }}"
    image: "{{ docker_registry_addr }}/{{ landscape }}/{{ image_name }}:{{ image_tag }}"
    state: started
    restart_policy: always
    published_ports: "{{ all_ports | map('regex_replace','(.*)','\\1:\\1') | list }}"
    volumes:
      - /opt/log:/opt/log
      - /tmp:/tmp
    env_file: "/tmp/{{ service_name }}.env"
    dns_servers: "{{ dns_servers | default([]) }}"
    ulimits:
      - "nofile:65536:65536"
  # when: "ansible_hostname in deploy_conf.hosts or ansible_default_ipv4.address in deploy_conf.hosts"

- name: empty env file for safe
  file:
    path: "/tmp/{{ service_name }}.env"
    state: absent

- name: "check health for {{ service_name}} with port {{ application_port }}"
  uri: 
    url: "http://127.0.0.1:{{ application_port }}/ping"
    status_code: 200
  register: check_result
  until: check_result.status == 200
  retries: 30
  delay: 10

- name: "register {{ service_name}}@{{ inventory_hostname }} to consul"
  uri:
    url: "http://127.0.0.1:8500/v1/agent/service/register"
    method: PUT
    body: "{\"name\":\"{{ service_name }}\", \"port\":{{ application_port }}, \"check\":{\"HTTP\":\"http://127.0.0.1:{{ application_port }}/ping\",\"Interval\":\"10s\"}}"
    body_format: json
    status_code: 200