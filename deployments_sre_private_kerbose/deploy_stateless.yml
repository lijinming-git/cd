- name: generate tmp file name
  set_fact:
    tmp_file_name:  "{{ namespace }}-{{ service_name }}.yaml"
- name: fill out template
  template:
    src: ./deployment.j2
    dest: /tmp/{{tmp_file_name}}
- name: create or update deployment
  k8s:
    state: present
    # definition: "{{ lookup('template', './deployment.j2') }}"
    src: /tmp/{{tmp_file_name}}
  register: execute_result
- debug:
    msg: "execute result: {{ execute_result }}"
# - name: remove tmp file
#   file:
#     path: /tmp/{{tmp_file_name}}
#     state: absent
- name: force to restart pods
  shell: kubectl patch deployment {{ service_name }} --namespace {{ namespace }} -p "{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"date\":\"$(date +%s)\"}}}}}"
  when: execute_result.changed == False
- name: check deployment result
  shell: kubectl rollout status deployment {{ service_name }} --namespace {{ namespace }}
  register: query_status
  until: query_status.stdout.find("successfully rolled out") != -1
  retries: 10
  delay: 15
# - name: search for all running pods labelled app={{ service_name }}
#   k8s_facts:
#     kind: Pod
#     label_selectors:
#     - app={{ service_name }}
#     field_selectors:
#     - status.phase=Running
#   register: pod_list
#   until: pod_list.resources|length == deploy_conf.replicas|int
#   retries: 5
#   delay: 30
# - name: display pod_list
#   debug:
#     msg: "pod_list is {{ pod_list.resources | map(attribute='metadata.name') | join(', ') }}"
- name: create or update service
  k8s:
    state: present
    definition: "{{ lookup('template', './service.j2') }}"
  when: (no_service is undefined) or (no_service != True)
- name: delete migration deployment
  shell: kubectl delete deployment {{ service_name }} --namespace {{ namespace }}
  when: service_name | regex_search('migration$')